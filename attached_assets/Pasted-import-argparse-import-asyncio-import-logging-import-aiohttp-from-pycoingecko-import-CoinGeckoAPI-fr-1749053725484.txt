import argparse
import asyncio
import logging
import aiohttp
from pycoingecko import CoinGeckoAPI
from datetime import datetime
import tweepy
from modules.coin_data import fetch_coin_prices_multi_source  # Updated import
from modules.posting_utils import post_to_x
from modules.api_clients import get_x_client
import os
from binance.client import Client as BinanceClient
from coinbase.wallet.client import Client as CoinbaseClient

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('CryptoBot')

COIN_IDS = [
    "ripple", "hedera-hashgraph", "stellar", "xdce-crowd-sale",
    "sui", "ondo-finance", "algorand", "casper-network"
]

async def check_location(binance_client):
    """Check if the API access is U.S. based."""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get('https://ipapi.co/json/') as response:
                if response.status == 200:
                    location_data = await response.json()
                    country = location_data.get("country")
                    if country == "US":
                        logger.info("API access confirmed as U.S.-based.")
                        return True
                    else:
                        logger.warning(f"API access is not U.S.-based (Country: {country}).")
                        return False
                else:
                    logger.error("Failed to get location data.")
                    return False
    except Exception as e:
        logger.error(f"Error checking location: {e}")
        return False

async def fetch_coin_data(coin_id, session, cg_client, binance_client, coinbase_client):
    """Fetch coin price data asynchronously."""
    try:
        prices = await fetch_coin_prices_multi_source([coin_id], cg_client, binance_client, coinbase_client)
        if prices and coin_id in prices:
            return {
                'coin_id': coin_id,
                'price': prices[coin_id]['usd'],
                'name': coin_id.capitalize()
            }
        else:
            logger.error(f"No price info returned for {coin_id}")
            return None
    except Exception as e:
        logger.error(f"Error fetching data for {coin_id}: {e}")
        return None

async def store_results_to_db(results):
    """Placeholder for database code, assuming a database manager exists."""
    pass

async def main_bot_run(test_discord: bool = False):
    """Main function to run the bot."""
    logger.info("Starting CryptoBotV2 daily run...")
    cg_client = CoinGeckoAPI()
    binance_client = BinanceClient(api_key=os.getenv("BINANCE_API_KEY"), api_secret=os.getenv("BINANCE_API_SECRET"))
    coinbase_client = CoinbaseClient(api_key=os.getenv("COINBASE_API_KEY"), api_secret=os.getenv("COINBASE_API_SECRET"))

    api_access_valid = await check_location(binance_client)
    if not api_access_valid:
        logger.error("API access is restricted based on location. Exiting bot.")
        return

    async with aiohttp.ClientSession() as session:
        results = []
        for coin_id in COIN_IDS:
            logger.info(f"Fetching data for {coin_id}...")
            result = await fetch_coin_data(coin_id, session, cg_client, binance_client, coinbase_client)
            if result:
                results.append(result)

        if results:
            await store_results_to_db(results)

            current_time = datetime.now().strftime("%Y-%m-%d at %H:%M")
            main_post = f"ðŸš€ Daily Crypto Update ({current_time})!\nðŸ“Š 8 Top Altcoins Thread:\n#Crypto #Altcoins #DeFi"
            try:
                main_tweet_id = await post_to_x(main_post)
                for data in results:
                    formatted_data = f"{data['name']}: ${data['price']}"
                    await post_to_x(formatted_data, [], main_tweet_id)
            except Exception as e:
                logger.error(f"Error posting updates to X: {e}")

if __name__ == "__main__":
    asyncio.run(main_bot_run())