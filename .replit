modules = ["python-3.11"]

[nix]
channel = "stable-24_05"

[workflows]
runButton = "X Platform Post"

[[workflows.workflow]]
name = "Main Bot Run"
author = 43339402
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python bot_v2.py --queue-only"

[[workflows.workflow]]
name = "Post to Discord"
author = 43339402
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python bot_v2.py --test-discord"

[[workflows.workflow]]
name = "Check Queue Status"
author = 43339402
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python check_queue_status.py"

[[workflows.workflow]]
name = "Test Discord Only"
author = 43339402
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "echo 'üß™ Testing Discord webhook posting...'"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python bot_v2.py --test-discord"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "echo '‚úÖ Discord test completed!'"

[[workflows.workflow]]
name = "Content Verification Report"
author = 43339402
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python content_verification_report.py"

[[workflows.workflow]]
name = "Post Live Stream Alerts"
author = 43339402
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "echo \"üî¥ POSTING UPCOMING CRYPTO LIVE STREAM ALERTS\""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python -c \""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "import asyncio"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "from modules.x_live_streams import get_next_stream_posts"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "from modules.api_clients import get_x_client"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "import time"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "def post_stream_alerts():"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    try:"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        # Get stream posts"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        stream_posts = get_next_stream_posts(max_posts=2)"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        if not stream_posts:"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            print('‚ùå No upcoming streams found')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            return"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        # Get X client"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        x_client = get_x_client(posting_only=True)"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        if not x_client:"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            print('‚ùå Could not initialize X client')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            return"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        # Post each stream alert"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        for i, stream_post in enumerate(stream_posts):"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            try:"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "                tweet = x_client.create_tweet(text=stream_post)"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '''                print(f'‚úÖ Posted live stream alert {i+1}: {tweet.data[\"id\"]}')'''

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "                time.sleep(10)  # Space out posts for free tier compliance"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            except Exception as e:"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "                print(f'‚ùå Error posting stream alert {i+1}: {e}')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        print('üéâ Live stream alerts posting completed!')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    except Exception as e:"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        print(f'‚ùå Error in stream alerts: {e}')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "post_stream_alerts()"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "\""

[[workflows.workflow]]
name = "Show Upcoming Streams"
author = 43339402
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "echo \"üîç DISCOVERING UPCOMING CRYPTO LIVE STREAMS\""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python -c \""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "import asyncio"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "import aiohttp"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "from modules.x_live_streams import discover_upcoming_live_streams, format_live_stream_post"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "from datetime import datetime"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "async def show_streams():"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    try:"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        async with aiohttp.ClientSession() as session:"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            streams = await discover_upcoming_live_streams(session)"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            if not streams:"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "                print('‚ùå No upcoming streams found')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "                return"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            print(f'üéôÔ∏è Found {len(streams)} upcoming crypto streams:')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            print('=' * 50)"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            for i, stream in enumerate(streams[:5], 1):"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "                scheduled_time = datetime.fromisoformat(stream['scheduled_time'])"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "                time_until = scheduled_time - datetime.now()"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "                hours_until = int(time_until.total_seconds() / 3600)"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "                "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '''                print(f'{i}. {stream[\"creator_name\"]} ({stream[\"creator_handle\"]})')'''

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '''                print(f'   üì∫ {stream[\"title\"]}')'''

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "                print(f'   ‚è∞ Starting in {hours_until}h')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '''                print(f'   üéØ {stream[\"specialty\"]} | {stream[\"followers\"]} followers')'''

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '''                print(f'   üìä Engagement: {stream[\"engagement_potential\"]}')'''

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "                print()"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '''            print('üîî Use \"Post Live Stream Alerts\" workflow to share these!')'''

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    except Exception as e:"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        print(f'‚ùå Error discovering streams: {e}')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "asyncio.run(show_streams())"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "\""

[[workflows.workflow]]
name = "Test Fixed Bot"
author = 43339402
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "echo \"üß™ Testing fixed bot with enhanced formatting...\""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python bot_v2.py --test-discord"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "echo \"‚úÖ Test completed - check Discord for proper formatting!\""

[[workflows.workflow]]
name = "X Platform Post"
author = 43339402
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python check_workflow_conflicts.py --type post_to_x || exit 1"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "echo \"üöÄ Posting crypto analysis to X (Twitter)...\""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python bot_v2.py --queue-only"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python check_workflow_conflicts.py --type post_to_x --complete"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "echo \"‚úÖ X posting completed successfully!\""

[[workflows.workflow]]
name = "Discord Test Post"
author = 43339402
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python check_workflow_conflicts.py --type post_to_discord || exit 1"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "echo \"üß™ Testing Discord webhook posting...\""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python bot_v2.py --test-discord"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python check_workflow_conflicts.py --type post_to_discord --complete"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "echo \"‚úÖ Discord test completed successfully!\""

[[workflows.workflow]]
name = "Content Verification Test"
author = 43339402
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "echo \"üîç Running enhanced content verification test...\""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python -c \""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "import asyncio"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "from modules.content_verification import verify_all_content"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "async def test_verification():"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    # Test data with enhanced verification requirements"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    test_data = {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        'coin_name': 'ripple',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        'price': 2.21,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        'price_change_24h': 5.2,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        'youtube_video': {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            'title': 'XRP Price Analysis 2025-06-09 Legal Updates',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            'url': 'https://youtu.be/test123',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            'video_id': 'test123',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            'platform': 'YouTube',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            'verified_crypto_specific': True,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            'content_date': '2025-06-09'"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        },"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        'social_metrics': {'mentions': 45, 'sentiment': 'Bullish'}"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    results = await verify_all_content(test_data)"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    print('üìä ENHANCED VERIFICATION RESULTS:')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '''    print(f'Should Post: {results[\"should_post\"]}')'''

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '''    print(f'Content Score: {results[\"content_rating\"][\"overall_score\"]}/100')'''

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '''    print(f'Video Verified: {results[\"video_verified\"]}')'''

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '''    print(f'Video Score: {results[\"video_score\"]}/100')'''

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '''    print(f'Reason: {results[\"post_decision_reason\"]}')'''

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    if results['content_rating']['warnings']:"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        print('‚ö†Ô∏è Warnings:')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        for warning in results['content_rating']['warnings']:"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            print(f'  ‚Ä¢ {warning}')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "asyncio.run(test_verification())"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "\""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "echo \"‚úÖ Content verification test completed!\""

[deployment]
run = ["sh", "-c", "python bot_v2.py --queue-only"]
build = ["sh", "-c", "mkdir -p data && python -m pip install --upgrade pip && pip install -r requirements.txt"]
ignorePorts = true

[[ports]]
localPort = 8080
externalPort = 80

[[ports]]
localPort = 8081
externalPort = 8081
